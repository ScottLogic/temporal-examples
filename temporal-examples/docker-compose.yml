services:
  temporal-worker:
    image: ${DOCKER_REGISTRY-}temporalworker
    build:
      context: .
      dockerfile: temporal-worker/Dockerfile
    environment:
      - Temporal__ClientUrl=temporal:7233
    volumes:
      - ./logs:/app/logs
    depends_on:
      temporal:
        condition: service_healthy
    ports:
      - 9000:9000

  microservice-worker:
    image: ${DOCKER_REGISTRY-}microserviceworker
    build:
      context: .
      dockerfile: microservice-worker/Dockerfile
    environment:
      - Temporal__ClientUrl=temporal:7233
    depends_on:
      temporal:
        condition: service_healthy
    ports:
      - 9001:9001

  rest-controller:
    image: rest-controller
    build:
      context: .
      dockerfile: RestController/Dockerfile
    depends_on:
      temporal:
        condition: service_healthy
    ports:
      - 8080:8080

  temporal:
    container_name: temporal
    image: temporalio/auto-setup
    environment:
      DB: postgres12
      DB_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PWD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_SEEDS: postgresql
      BIND_ON_IP: 0.0.0.0
      PROMETHEUS_ENDPOINT: 0.0.0.0:8000
    ports:
      - 7233:7233
      - 8000:8000
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "tctl", "--address", "127.0.0.1:7233", "cluster", "health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  temporal-cli:
    container_name: temporal-cli
    image: temporalio/temporal:latest
    entrypoint: [ "sleep", "infinity" ]
    environment:
      TEMPORAL_ADDRESS: temporal:7233
    volumes:
      - ./scripts:/scripts

  temporal-ui:
    container_name: temporal-ui
    image: temporalio/ui
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_CORS_ORIGINS: http://localhost:3000
      TEMPORAL_UI_PORT: 8233
    ports:
      - 8233:8233
    depends_on:
      temporal:
        condition: service_healthy

  postgresql:
    container_name: postgresql
    image: postgres
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
    volumes:
      - "${POSTGRES_DIR:-./postgres}:/var/lib/postgresql/data:rw"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

volumes:
  grafana-storage:
